// ********RoostGPT********
/*
Test generated by RoostGPT for test unittest1 using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=hasClientError_daa5795c23
ROOST_METHOD_SIG_HASH=hasClientError_e35a45edc2
Scenario 1: Test to verify that method returns false when there are no error codes present.
Details:
  TestName: testHasClientErrorWithNoErrorCodes.
  Description: This test is designed to verify that the hasClientError() method returns false when getErrorCodes() is null or doesn't contain any error codes.
Execution:
  Arrange: Create a GoogleResponse object and don't set any error codes.
  Act: Call the hasClientError() method.
  Assert: Assert that the method returns false.
Validation:
  The test validates that the method correctly handles the case where there are no error codes. This is important for ensuring that the method doesn't falsely indicate the presence of client errors when there aren't any.
Scenario 2: Test to verify that method returns true when there is a client error code present.
Details:
  TestName: testHasClientErrorWithClientErrorCode.
  Description: This test is designed to verify that the hasClientError() method returns true when getErrorCodes() contains a client error code (InvalidResponse, MissingResponse, BadRequest).
Execution:
  Arrange: Create a GoogleResponse object and set a client error code (e.g., InvalidResponse).
  Act: Call the hasClientError() method.
  Assert: Assert that the method returns true.
Validation:
  The test validates that the method correctly identifies the presence of a client error code. This is important for ensuring accurate error reporting.
Scenario 3: Test to verify that method returns false when there are only non-client error codes present.
Details:
  TestName: testHasClientErrorWithNonClientErrorCode.
  Description: This test is designed to verify that the hasClientError() method returns false when getErrorCodes() contains only non-client error codes.
Execution:
  Arrange: Create a GoogleResponse object and set a non-client error code.
  Act: Call the hasClientError() method.
  Assert: Assert that the method returns false.
Validation:
  The test validates that the method correctly handles the case where there are error codes present, but none of them are client error codes. This is important for ensuring accurate error reporting.
*/
// ********RoostGPT********
package com.baeldung.captcha;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import com.fasterxml.jackson.annotation.*;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.*;

@Tag("com.baeldung.captcha")
@Tag("com.baeldung.captcha.hasClientError")
@Tag("com.baeldung.captcha.getErrorCodes")
public class GoogleResponseHasClientErrorTest {

	@Test
	@Tag("valid")
	public void testHasClientErrorWithNoErrorCodes() {
		GoogleResponse googleResponse = new GoogleResponse();
		assertFalse(googleResponse.hasClientError());
	}

	@Test
	@Tag("valid")
	public void testHasClientErrorWithClientErrorCode() {
		GoogleResponse googleResponse = new GoogleResponse();
		googleResponse.setErrorCodes(new ErrorCode[] { ErrorCode.InvalidResponse });
		assertTrue(googleResponse.hasClientError());
	}

	@Test
	@Tag("valid")
	public void testHasClientErrorWithNonClientErrorCode() {
		GoogleResponse googleResponse = new GoogleResponse();
		googleResponse.setErrorCodes(new ErrorCode[] { ErrorCode.SomeOtherError });
		assertFalse(googleResponse.hasClientError());
	}

}